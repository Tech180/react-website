{"ast":null,"code":"import { Platform } from 'react-native';\nimport createMultiStyleIconSet from './createMultiStyleIconSet';\nexport const FA5Style = {\n  regular: 'regular',\n  light: 'light',\n  solid: 'solid',\n  brand: 'brand'\n};\nexport function createFA5iconSet(glyphMap) {\n  let metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let fonts = arguments.length > 2 ? arguments[2] : undefined;\n  let pro = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const metadataKeys = Object.keys(metadata);\n  const fontFamily = `FontAwesome5${pro ? 'Pro' : 'Free'}`;\n  function fallbackFamily(glyph) {\n    for (let i = 0; i < metadataKeys.length; i += 1) {\n      const family = metadataKeys[i];\n      if (metadata[family].indexOf(glyph) !== -1) {\n        return family === 'brands' ? 'brand' : family;\n      }\n    }\n    return 'regular';\n  }\n  function glyphValidator(glyph, style) {\n    const family = style === 'brand' ? 'brands' : style;\n    if (metadataKeys.indexOf(family) === -1) return false;\n    return metadata[family].indexOf(glyph) !== -1;\n  }\n  function createFontAwesomeStyle(styleName, fontWeight) {\n    let family = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : fontFamily;\n    let fontFile = fonts[styleName];\n    return {\n      fontFamily: `${family}-${styleName}`,\n      fontFile,\n      fontStyle: Platform.select({\n        ios: {\n          fontWeight\n        },\n        default: {}\n      }),\n      glyphMap\n    };\n  }\n  const brandIcons = createFontAwesomeStyle('Brand', '400');\n  const lightIcons = createFontAwesomeStyle('Light', '100');\n  const regularIcons = createFontAwesomeStyle('Regular', '400');\n  const solidIcons = createFontAwesomeStyle('Solid', '700');\n  const Icon = createMultiStyleIconSet({\n    brand: brandIcons,\n    light: lightIcons,\n    regular: regularIcons,\n    solid: solidIcons\n  }, {\n    defaultStyle: 'regular',\n    fallbackFamily,\n    glyphValidator\n  });\n  return Icon;\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAQ,QAAQ,cAAc;AACvC,OAAOC,uBAAuB,MAAM,2BAA2B;AAE/D,OAAO,MAAMC,QAAQ,GAAG;EACtBC,OAAO,EAAE,SAAS;EAClBC,KAAK,EAAE,OAAO;EACdC,KAAK,EAAE,OAAO;EACdC,KAAK,EAAE;CACR;AAED,OAAM,SAAUC,gBAAgB,CAACC,QAAQ,EAAmC;EAAA,IAAjCC,QAAQ,uEAAG,EAAE;EAAA,IAAEC,KAAK;EAAA,IAAEC,GAAG,uEAAG,KAAK;EAC1E,MAAMC,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACL,QAAQ,CAAC;EAC1C,MAAMM,UAAU,GAAG,eAAeJ,GAAG,GAAG,KAAK,GAAG,MAAM,EAAE;EAExD,SAASK,cAAc,CAACC,KAAK;IAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,YAAY,CAACO,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MAC/C,MAAME,MAAM,GAAGR,YAAY,CAACM,CAAC,CAAC;MAC9B,IAAIT,QAAQ,CAACW,MAAM,CAAC,CAACC,OAAO,CAACJ,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;QAC1C,OAAOG,MAAM,KAAK,QAAQ,GAAG,OAAO,GAAGA,MAAM;;;IAIjD,OAAO,SAAS;EAClB;EAEA,SAASE,cAAc,CAACL,KAAK,EAAEM,KAAK;IAClC,MAAMH,MAAM,GAAGG,KAAK,KAAK,OAAO,GAAG,QAAQ,GAAGA,KAAK;IACnD,IAAIX,YAAY,CAACS,OAAO,CAACD,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,KAAK;IACrD,OAAOX,QAAQ,CAACW,MAAM,CAAC,CAACC,OAAO,CAACJ,KAAK,CAAC,KAAK,CAAC,CAAC;EAC/C;EAEA,SAASO,sBAAsB,CAACC,SAAS,EAAEC,UAAU,EAAqB;IAAA,IAAnBN,MAAM,uEAAGL,UAAU;IACxE,IAAIY,QAAQ,GAAGjB,KAAK,CAACe,SAAS,CAAC;IAE/B,OAAO;MACLV,UAAU,EAAE,GAAGK,MAAM,IAAIK,SAAS,EAAE;MACpCE,QAAQ;MACRC,SAAS,EAAE5B,QAAQ,CAAC6B,MAAM,CAAC;QACzBC,GAAG,EAAE;UACHJ;SACD;QACDK,OAAO,EAAE;OACV,CAAC;MACFvB;KACD;EACH;EAEA,MAAMwB,UAAU,GAAGR,sBAAsB,CAAC,OAAO,EAAE,KAAK,CAAC;EACzD,MAAMS,UAAU,GAAGT,sBAAsB,CAAC,OAAO,EAAE,KAAK,CAAC;EACzD,MAAMU,YAAY,GAAGV,sBAAsB,CAAC,SAAS,EAAE,KAAK,CAAC;EAC7D,MAAMW,UAAU,GAAGX,sBAAsB,CAAC,OAAO,EAAE,KAAK,CAAC;EACzD,MAAMY,IAAI,GAAGnC,uBAAuB,CAClC;IACEK,KAAK,EAAE0B,UAAU;IACjB5B,KAAK,EAAE6B,UAAU;IACjB9B,OAAO,EAAE+B,YAAY;IACrB7B,KAAK,EAAE8B;GACR,EACD;IACEE,YAAY,EAAE,SAAS;IACvBrB,cAAc;IACdM;GACD,CACF;EAED,OAAOc,IAAI;AACb","names":["Platform","createMultiStyleIconSet","FA5Style","regular","light","solid","brand","createFA5iconSet","glyphMap","metadata","fonts","pro","metadataKeys","Object","keys","fontFamily","fallbackFamily","glyph","i","length","family","indexOf","glyphValidator","style","createFontAwesomeStyle","styleName","fontWeight","fontFile","fontStyle","select","ios","default","brandIcons","lightIcons","regularIcons","solidIcons","Icon","defaultStyle"],"sources":["/mnt/Backup/website/node_modules/@expo/vector-icons/src/createIconSetFromFontAwesome5.ts"],"sourcesContent":["import { Platform } from 'react-native';\nimport createMultiStyleIconSet from './createMultiStyleIconSet';\n\nexport const FA5Style = {\n  regular: 'regular',\n  light: 'light',\n  solid: 'solid',\n  brand: 'brand',\n};\n\nexport function createFA5iconSet(glyphMap, metadata = {}, fonts, pro = false) {\n  const metadataKeys = Object.keys(metadata);\n  const fontFamily = `FontAwesome5${pro ? 'Pro' : 'Free'}`;\n\n  function fallbackFamily(glyph) {\n    for (let i = 0; i < metadataKeys.length; i += 1) {\n      const family = metadataKeys[i];\n      if (metadata[family].indexOf(glyph) !== -1) {\n        return family === 'brands' ? 'brand' : family;\n      }\n    }\n\n    return 'regular';\n  }\n\n  function glyphValidator(glyph, style) {\n    const family = style === 'brand' ? 'brands' : style;\n    if (metadataKeys.indexOf(family) === -1) return false;\n    return metadata[family].indexOf(glyph) !== -1;\n  }\n\n  function createFontAwesomeStyle(styleName, fontWeight, family = fontFamily) {\n    let fontFile = fonts[styleName];\n\n    return {\n      fontFamily: `${family}-${styleName}`,\n      fontFile,\n      fontStyle: Platform.select({\n        ios: {\n          fontWeight,\n        },\n        default: {},\n      }),\n      glyphMap,\n    };\n  }\n\n  const brandIcons = createFontAwesomeStyle('Brand', '400');\n  const lightIcons = createFontAwesomeStyle('Light', '100');\n  const regularIcons = createFontAwesomeStyle('Regular', '400');\n  const solidIcons = createFontAwesomeStyle('Solid', '700');\n  const Icon = createMultiStyleIconSet(\n    {\n      brand: brandIcons,\n      light: lightIcons,\n      regular: regularIcons,\n      solid: solidIcons,\n    },\n    {\n      defaultStyle: 'regular',\n      fallbackFamily,\n      glyphValidator,\n    },\n  );\n\n  return Icon;\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}